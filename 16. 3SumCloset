QUESTION:
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.



APPROACH:
Sorting + Two Pointers (O(n²))
We can solve this problem similar to 3Sum but instead of finding sum == target, we track the closest difference.
Steps:
1.Sort the array — makes two-pointer scanning easier.
2.Loop i from 0 to n-3:
    1.Use two pointers:
        1.left = i+1 and right = n-1.
    2.Compute sum = nums[i] + nums[left] + nums[right].
    3.If |sum - target| is smaller than the best seen, update closest.
    4.If sum < target → move left++ (we want a bigger sum).
    5.If sum > target → move right-- (we want a smaller sum).
    6.If sum == target → exact match found, return it immediately.
3.Return the closest sum after the loop.


CODE:
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

/**
 * cmp - Comparison function for qsort (ascending order).
 */
int cmp(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int threeSumClosest(int* nums, int numsSize, int target) {
    // Sort the numbers for two-pointer scanning
    qsort(nums, numsSize, sizeof(int), cmp); 
    
    // Initialize closest with the first three numbers' sum
    int closest = nums[0] + nums[1] + nums[2]; 

    // Loop through each number as the fixed first element
    for (int i = 0; i < numsSize - 2; i++) {
        int left = i + 1;                 // Second pointer
        int right = numsSize - 1;         // Third pointer

        // Two-pointer search for best pair
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            // Update closest if this sum is nearer to target
            if (abs(sum - target) < abs(closest - target)) {
                closest = sum;
            }

            if (sum < target) {
                // Sum too small → need a bigger total, move left pointer right
                left++;  
            } else if (sum > target) {
                // Sum too large → need a smaller total, move right pointer left
                right--; 
            } else {
                // Exact match found → this is as close as possible
                return sum; 
            }
        }
    }

    return closest; // Best found sum
}
