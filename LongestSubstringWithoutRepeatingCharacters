QUESTION:
Given a string s, find the length of the longest substring without duplicate characters.

APPROACH:
Sliding Window
We can solve it in O(n) time using a sliding window and an array/map to store the last index where each character appeared.
Steps:
1.Have two pointers, start (start of current window) and i (current char index).
2.Keep a lookup table (lastIndex for ASCII) storing the last seen position of each char.
3.If the current char was seen inside the current window, move start to lastIndex[ch] + 1.
4.Update lastIndex[ch] to the current index.
5.Track maxLen as the max window length found so far.


CODE:
#include <stdio.h>
#include <string.h>

int lengthOfLongestSubstring(char *s) {
    int lastIndex[256]; 
    for (int i = 0; i < 256; i++) lastIndex[i] = -1;

    int maxLen = 0;
    int start = 0;

    for (int i = 0; s[i] != '\0'; i++) {
        unsigned char ch = s[i];

       
        if (lastIndex[ch] >= start)
            start = lastIndex[ch] + 1;

        lastIndex[ch] = i; 
        int windowLen = i - start + 1;
        if (windowLen > maxLen)
            maxLen = windowLen;
    }
    return maxLen;
}

