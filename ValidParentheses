Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.



#include <stdbool.h>
#include <string.h>

bool isValid(char * s) {
    char stack[strlen(s)];
    int top = -1;

    for (int i = 0; s[i] != '\0'; i++) {
        char c = s[i];
        
        if (c == '(' || c == '{' || c == '[') {
            stack[++top] = c; // push
        } else {
            if (top == -1) return false; // no matching open
            
            char topChar = stack[top--]; // pop
            if ((c == ')' && topChar != '(') ||
                (c == '}' && topChar != '{') ||
                (c == ']' && topChar != '[')) {
                return false; // mismatch
            }
        }
    }
    return top == -1; // stack must be empty
}
