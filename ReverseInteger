QUESTION:
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).



APPROACH:
1.We build the reversed number digit-by-digit using modulo and division.
2.Before adding a new digit, check for possible overflow:
        If rev > INT_MAX / 10 → overflow
        If rev == INT_MAX / 10 and pop > 7 → overflow
        If rev < INT_MIN / 10 → overflow
        If rev == INT_MIN / 10 and pop < -8 → overflow


CODE:
#include <stdio.h>
#include <limits.h>
int reverse(int x) {
    int rev = 0;
    while (x != 0) {
        int pop = x % 10;
        x /= 10;
        
    
        if (rev > INT_MAX / 10 || (rev == INT_MAX / 10 && pop > 7))
            return 0;
        
        if (rev < INT_MIN / 10 || (rev == INT_MIN / 10 && pop < -8))
            return 0;

        rev = rev * 10 + pop;
    }
    return rev;
}

