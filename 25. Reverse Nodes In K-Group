QUESTION:
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.



APPROACH:
Iterative with Group Reversal
We can solve this in O(n) time using pointer manipulation:
Steps:
1.Count nodes in list to know how many complete groups of k exist.
2.Use a dummy node pointing to head for easier head management after reversal.
3.Keep a pointer prevGroup which points to the node before the current group to reverse.
4.For each complete group:
  Let groupStart = prevGroup->next
  Let groupEnd = prevGroup->next advanced k times
  Reverse the nodes in that group in-place
  Connect:
  prevGroup->next -> new head of reversed group
  end of reversed group -> next group's start
  Move prevGroup to the end of the reversed group.
5.Stop when fewer than k nodes remain.



CODE:
#include<stdio.h>
#include<stdlib.h>

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseKGroup(struct ListNode* head, int k) {
    if (!head || k == 1) return head;

    
    int count = 0;
    struct ListNode* curr = head;
    while (curr) {
        count++;
        curr = curr->next;
    }

    struct ListNode dummy;
    dummy.next = head;
    struct ListNode* prevGroup = &dummy;

    while (count >= k) {
        struct ListNode* curr = prevGroup->next;   
        struct ListNode* next = curr->next;

       
        for (int i = 1; i < k; i++) {
            curr->next = next->next;
            next->next = prevGroup->next;
            prevGroup->next = next;
            next = curr->next;
        }

        prevGroup = curr;
        count -= k;
    }

    return dummy.next;
}
