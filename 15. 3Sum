QUESTION:
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.



APPROACH:
Sorting + Two Pointers (O(n²))
We can solve it efficiently with:
1.Sort the array → makes duplicate handling easier and allows two-pointer search.
2.Loop i from 0 → n-3 (fix the first element).
3.Skip duplicates for the first element (avoid repeating same triplet).
4.Use two-pointer technique (left at i+1 and right at n-1) to find pairs that sum to -nums[i].
5.Move pointers:
    1.If sum is less than target → move left forward.
    2.If sum is greater than target → move right backward.
    3.Else → record the triplet and skip duplicates.
6.Continue until all unique triplets are found.



CODE:
#include <stdio.h>
#include <stdlib.h>


int cmp(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}


int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    *returnSize = 0;
    if (numsSize < 3) return NULL;

    qsort(nums, numsSize, sizeof(int), cmp);

    
    int capacity = numsSize * numsSize;
    int **res = (int**)malloc(capacity * sizeof(int*));
    *returnColumnSizes = (int*)malloc(capacity * sizeof(int));

    for (int i = 0; i < numsSize - 2; i++) {
        
        if (i > 0 && nums[i] == nums[i-1]) continue;

        int left = i + 1;
        int right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                res[*returnSize] = (int*)malloc(3 * sizeof(int));
                res[*returnSize][0] = nums[i];
                res[*returnSize][1] = nums[left];
                res[*returnSize][2] = nums[right];
                (*returnColumnSizes)[*returnSize] = 3;
                (*returnSize)++;

                
                while (left < right && nums[left] == nums[left+1]) left++;
                
                while (left < right && nums[right] == nums[right-1]) right--;

                left++;
                right--;
            } 
            else if (sum < 0) {
                left++;
            } 
            else {
                right--;
            }
        }
    }
    return res;
}
