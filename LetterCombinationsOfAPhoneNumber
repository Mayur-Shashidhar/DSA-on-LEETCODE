Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



#include <stdio.h>
#include <stdlib.h>
#include <string.h>


char *mapping[] = {
    "",     "",     "abc",  "def",
    "ghi",  "jkl",  "mno",  "pqrs",
    "tuv",  "wxyz"
};

void backtrack(char *digits, int index, char *current, char **result, int *returnSize) {
    if (digits[index] == '\0') {  
        current[index] = '\0';
        result[*returnSize] = strdup(current); 
        (*returnSize)++;
        return;
    }

    char *letters = mapping[digits[index] - '0'];
    for (int i = 0; letters[i] != '\0'; i++) {
        current[index] = letters[i];
        backtrack(digits, index + 1, current, result, returnSize);
    }
}

char **letterCombinations(char *digits, int *returnSize) {
    *returnSize = 0;
    if (digits == NULL || *digits == '\0') {
        return NULL;
    }

    int len = strlen(digits);
    
    int maxComb = 1;
    for (int i = 0; i < len; i++) {
        if (digits[i] == '7' || digits[i] == '9')
            maxComb *= 4;
        else
            maxComb *= 3;
    }

    char **result = (char **)malloc(maxComb * sizeof(char *));
    char *current = (char *)malloc(len + 1);

    backtrack(digits, 0, current, result, returnSize);

    free(current);
    return result;
}
