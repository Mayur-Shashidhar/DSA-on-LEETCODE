QUESTION:
Given a string s, return the longest palindromic substring in s.


APPROACH:
Expand Around Center
A palindrome mirrors around its center.
If we try each character as a center and expand outward (both odd length and even length), we can find all possible palindromes.
Steps:
1.Loop through each position in the string.
2.Expand outward for:
    1.Odd length center (left = i, right = i)
    2.Even length center (left = i, right = i+1)
3.If the palindrome length from expansion is longer than the best found so far, update start and max length.
4.Return s[start .. start+maxLen-1].


CODE:
#include <stdio.h>
#include <string.h>


int expandFromCenter(char *s, int left, int right) {
    int n = strlen(s);
    while (left >= 0 && right < n && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

char* longestPalindrome(char *s) {
    int n = strlen(s);
    if (n == 0) return "";

    int start = 0, maxLen = 1;

    for (int i = 0; i < n; i++) {
        int len1 = expandFromCenter(s, i, i);     
        int len2 = expandFromCenter(s, i, i + 1); 
        int len = (len1 > len2) ? len1 : len2;

        if (len > maxLen) {
            maxLen = len;
            start = i - (len - 1) / 2;
        }
    }

    
    char *res = (char*)malloc((maxLen + 1) * sizeof(char));
    strncpy(res, s + start, maxLen);
    res[maxLen] = '\0';
    return res;
}
