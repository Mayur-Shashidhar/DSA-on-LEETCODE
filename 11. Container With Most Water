QUESTION:
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.



APPROACH:
Two-pointer approach:
1.Place one pointer at the start (left) and one at the end (right).
2.Calculate the area.
3.Move the pointer pointing at the shorter line inward â€” because the limiting factor is the smaller height, and moving the taller line inward won't help increase area.
This greedy two-pointer approach works in a single pass, O(n).


CODE:
#include <stdio.h>
int maxArea(int* height, int heightSize) {
    int left = 0;
    int right = heightSize - 1;
    int max_area = 0;

    while (left < right) {
        int h = (height[left] < height[right]) ? height[left] : height[right];
        int width = right - left;
        int area = h * width;

        if (area > max_area)
            max_area = area;

        
        if (height[left] < height[right])
            left++;
        else
            right--;
    }

    return max_area;
}
