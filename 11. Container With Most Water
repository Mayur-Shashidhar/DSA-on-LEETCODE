QUESTION:
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.



APPROACH:
Two-pointer approach:
1.Place one pointer at the start (left) and one at the end (right).
2.Calculate the area.
3.Move the pointer pointing at the shorter line inward — because the limiting factor is the smaller height, and moving the taller line inward won't help increase area.
This greedy two-pointer approach works in a single pass, O(n).


CODE:
#include <stdio.h>

int maxArea(int* height, int heightSize) {
    int left = 0;                  // Pointer at the start
    int right = heightSize - 1;    // Pointer at the end
    int max_area = 0;              // Track max area found so far

    // Move the two pointers towards each other
    while (left < right) {
        // Find the height of the smaller line
        int h = (height[left] < height[right]) ? height[left] : height[right];
        // Width between the two lines
        int width = right - left;
        // Calculate area
        int area = h * width;
        // Update maximum if larger area found
        if (area > max_area)
            max_area = area;
        
        /**
         * Move the pointer pointing to the shorter line inward —
         * because the height is limited by the shorter line,
         * moving the taller one inward won't help get a bigger area,
         * but moving the shorter one might find a taller line.
         */
        if (height[left] < height[right])
            left++;
        else
            right--;
    }

    return max_area;
}
