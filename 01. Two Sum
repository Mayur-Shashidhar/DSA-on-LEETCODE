QUESTION :
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

APPROACH:
1.Use two nested loops.
2.For each element, check if there exists another element that sums up to the target.
3.Return the pair of indices when found.

CODE:
#include <stdlib.h> // For malloc()


int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    *returnSize = 2; // The result will always contain two indices

    // Dynamically allocate memory for the result array (two integers)
    int* result = malloc(2 * sizeof(int));
    
    // Outer loop to fix the first element
    for (int i = 0; i < numsSize; i++) {
        
        // Inner loop to fix the second element
        for (int j = i + 1; j < numsSize; j++) {
            
            // Check if the two numbers add up to the target
            if (nums[i] + nums[j] == target) {
                result[0] = i; // Store the first index
                result[1] = j; // Store the second index
                return result; // Return the result array
            }
        }
    }

    // If no pair is found, return NULL
    // Note: In this case, malloc'ed memory is leaked, ideally should free before return.
    return NULL;
}
