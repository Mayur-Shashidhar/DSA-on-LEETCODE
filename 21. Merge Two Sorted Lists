QUESTION:
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.




APPROACH:
Iteration with Dummy Node (O(m+n))
Since both lists are already sorted, we can merge them using the same idea as the merge step in merge sort.
Steps:
1.Create a dummy node and a tail pointer to build the merged list.
2.Compare the heads of list1 and list2:
    1.Append the smaller node to tail->next
    2.Advance the pointer (list1 or list2) for that node.
3.Continue until one list is empty.
4.Append the rest of the non-empty list to the merged list.
5.Return dummy.next as the head of the merged list.



CODE:
#include<stdio.h>
#include<stdlib.h>

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode dummy;  
    struct ListNode *tail = &dummy;
    dummy.next = NULL;
    while (list1 != NULL && list2 != NULL) {
        if (list1->val <= list2->val) {
            tail->next = list1;
            list1 = list1->next;
        } else {
            tail->next = list2;
            list2 = list2->next;
        }
        tail = tail->next;
    }
    if (list1 != NULL)
        tail->next = list1;
    else
        tail->next = list2;

    return dummy.next;
}
