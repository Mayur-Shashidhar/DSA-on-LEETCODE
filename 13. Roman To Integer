QUESTION:
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.


APPROACH:
The idea is:
1.Map each Roman numeral character to its integer value.
2.Iterate through the string from left to right.
3.If current value < next value, subtract it from the total (subtractive case like IV, IX).
4.Else, add it to the total.


CODE:
#include <stdio.h>
#include <string.h>

/**
 * value - Returns integer value of a Roman numeral character.
 *
 * @c: Roman numeral character (I, V, X, L, C, D, M)
 *
 * Return: Integer value corresponding to Roman numeral
 */
int value(char c) {
    switch (c) {
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default: return 0; // Invalid character
    }
}

int romanToInt(char *s) {
    int total = 0;              // Final integer result
    int len = strlen(s);        // Length of the string
    
    // Traverse through the Roman numerals
    for (int i = 0; i < len; i++) {
        int curr = value(s[i]); // Current numeral value
        int next = (i + 1 < len) ? value(s[i + 1]) : 0; // Next numeral value (0 if none left)
        
        /**
         * If current value is less than next, this is a subtractive case:
         * Example: IV → I (1) is before V (5) → subtract 1.
         */
        if (curr < next) {
            total -= curr;
        } 
        // Otherwise, add normally
        else {
            total += curr;
        }
    }
    return total;
}
